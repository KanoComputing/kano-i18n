#!/usr/bin/env python
# coding:utf8
#
# fake-locale
#
# Copyright (C) 2016 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
# Generate a fake English-language locale file to
# test unicode support and 

"""
kaka.po input output

"""


import polib
import sys
import time
import re

if len(sys.argv) < 3:
    print "Usage: fake-locale messages.pot en_QQ.po"

inFile = sys.argv[1]
outFile = sys.argv[2]

po = polib.pofile(inFile)

new = polib.POFile()

old_metadata = po.ordered_metadata()
new_metadata = []

metadata = {
    'PO-Revision-Date': time.strftime("%Y-%M-%d %H:%m%z"),
    'Last-Translator': 'autogenerated',
    'Content-Type': 'text/plain; charset=UTF-8\n',
    'Language': 'en',
    'Language-Team': 'dev@kano.me'
    }

for (mid, val) in old_metadata:

    if mid not in metadata:
        metadata[mid] = val


new.metadata = metadata

english_lower = re.compile('[a-z]')
english_upper = re.compile('[A-Z]')

english_lower_wide = u'ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ'
english_upper_wide = u'ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ'


def trans_char(c):
    if english_lower.match(c):
        return english_lower_wide[ord(c)-ord('a')]
    elif english_upper.match(c):
        return english_upper_wide[ord(c)-ord('A')]
    else:
        return c


def trans_str(msgstr):
    out = []
    lastc = ''
    for c in msgstr:
        if lastc != '%':
            out.append(trans_char(c))
        else:
            out.append(c)
        lastc = c
    return u''.join(out)

for entry in po:
    entry.msgstr = trans_str(entry.msgid)
    new.append(entry)

new.save(outFile)
